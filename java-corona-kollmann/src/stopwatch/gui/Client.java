/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stopwatch.gui;

import java.awt.Dimension;
import java.io.IOException;
import java.util.List;
import stopwatch.server.Response;

/**
 *
 * @author olive
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
        jbutClear.setVisible(false);
        jbutDisconnect.setVisible(false);
        jbutEnd.setVisible(false);
        jbutStart.setVisible(false);
        jbutStop.setVisible(false);
        jbutConnect.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jpanEast = new javax.swing.JPanel();
        jbutConnect = new javax.swing.JButton();
        jbutDisconnect = new javax.swing.JButton();
        jbutStart = new javax.swing.JButton();
        jbutStop = new javax.swing.JButton();
        jbutClear = new javax.swing.JButton();
        jbutEnd = new javax.swing.JButton();
        jpanCenter = new javax.swing.JPanel();
        jlabTimer = new javax.swing.JLabel();
        jpanNorth = new javax.swing.JPanel();
        jlabRefreshrate = new javax.swing.JLabel();
        jslideRate = new javax.swing.JSlider();
        jlab1ms = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpanEast.setMinimumSize(new java.awt.Dimension(110, 163));
        jpanEast.setPreferredSize(new java.awt.Dimension(110, 163));
        jpanEast.setLayout(new java.awt.GridLayout(6, 1, 5, 5));

        jbutConnect.setText("Connect");
        jbutConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutConnectActionPerformed(evt);
            }
        });
        jpanEast.add(jbutConnect);

        jbutDisconnect.setText("Disconnect");
        jbutDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutDisconnectActionPerformed(evt);
            }
        });
        jpanEast.add(jbutDisconnect);

        jbutStart.setText("Start");
        jbutStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutStartActionPerformed(evt);
            }
        });
        jpanEast.add(jbutStart);

        jbutStop.setText("Stop");
        jbutStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutStopActionPerformed(evt);
            }
        });
        jpanEast.add(jbutStop);

        jbutClear.setText("Clear");
        jpanEast.add(jbutClear);

        jbutEnd.setText("End");
        jpanEast.add(jbutEnd);

        getContentPane().add(jpanEast, java.awt.BorderLayout.EAST);

        jpanCenter.setLayout(new java.awt.GridBagLayout());

        jlabTimer.setFont(new java.awt.Font("Tahoma", 1, 100)); // NOI18N
        jlabTimer.setText("0.000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jpanCenter.add(jlabTimer, gridBagConstraints);

        getContentPane().add(jpanCenter, java.awt.BorderLayout.CENTER);

        jlabRefreshrate.setText("Refreshrate: 1s");
        jpanNorth.add(jlabRefreshrate);

        jslideRate.setPreferredSize(new java.awt.Dimension(500, 26));
        jpanNorth.add(jslideRate);

        jlab1ms.setText("1ms");
        jpanNorth.add(jlab1ms);

        getContentPane().add(jpanNorth, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbutStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbutStopActionPerformed

    private void jbutStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbutStartActionPerformed

    private void jbutDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutDisconnectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbutDisconnectActionPerformed

    private void jbutConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutConnectActionPerformed
        System.out.println("Button pressed" + Thread.currentThread().getId());
        ConnectionWorker worker = new MyConnectionWorker("127.0.0.1", 8080);
        worker.execute();  
    }//GEN-LAST:event_jbutConnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbutClear;
    private javax.swing.JButton jbutConnect;
    private javax.swing.JButton jbutDisconnect;
    private javax.swing.JButton jbutEnd;
    private javax.swing.JButton jbutStart;
    private javax.swing.JButton jbutStop;
    private javax.swing.JLabel jlab1ms;
    private javax.swing.JLabel jlabRefreshrate;
    private javax.swing.JLabel jlabTimer;
    private javax.swing.JPanel jpanCenter;
    private javax.swing.JPanel jpanEast;
    private javax.swing.JPanel jpanNorth;
    private javax.swing.JSlider jslideRate;
    // End of variables declaration//GEN-END:variables
    
    public void handleResponse(Response resp) {
        
    }
    
    private class MyConnectionWorker extends ConnectionWorker {

        public MyConnectionWorker(String host, int port) throws IOException {
            super(host, port);
        }

        @Override
        protected void done() {
            
            try {
                String ergebnis = get();
                System.out.println(ergebnis + " " + Thread.currentThread().getId());
                jlabTimer.setText(ergebnis);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        @Override
        protected void process(List<Integer> chunks) {
            for (int x : chunks) {
                System.out.println("Process " + x + "Thread " + Thread.currentThread().getId());
            }
        }  
    }
}
